Maps are containers that hold elements in a key-value combination, following a specific order. In a map, the key values are
generally used to sort and uniquely identify the elements, while the mapped values store the content associated to this key.
The unique keys are all sorted using a comparison function which can be overwritten by the programmer. The types of key and
mapped value may differ, and are grouped together in member type value_type, which is a pair type combining both:

typedef pair<const Key, T> value_type;


Internally, the elements in a map are always sorted by its key following a specific strict weak ordering criterion indicated by its
internal comparison object (of type Compare). Map containers are generally slower than unordered_map containers to access individual
elements by their key, but they allow the direct iteration on subsets based on their order. The mapped values in a map can be accessed
directly by their corresponding key using the bracket operator ((operator[]).

Maps are typically implemented as binary search trees, also known as red-black tree diagrams.

To construct a map object, there are a couple things you could do. In my header file (13_Map.h), you will see, there is no output of
the function representing these methods. Maps are typically initialized empty, and added onto later, but can have elements inserted 
at contruction. I just prefer to use the first way. Here's the five ways I managed to come up with:

1. std::map<type1, type2> mapName;
2. std::map<type1, type2> mapName (copyMapBeginIteration, copyMapEndIteration);
3. std::map<type1, type2> mapName (copyMap);
4. std::map<type1, type2, comparisonFunction> mapName;
5. std::map<type1, type2, comparisonFunctionPointer> mapName;

All together, there are 